What happens when you initialize a repository? Why do you need to do it?

By using the command "git init" you are basically telling Git to create a 
repository within the current directory. A ".git" file is created within the
current directory which allows commits to now be executed.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area serves as intermediary step between the working directory and the
repository. The benefits of a staging area is that it allows a more granular 
control of which specific files to include when making a commit to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

By effectively using both the staging area and the “git diff” command you can break 
up all the changes since the last commit into logical sections by placing each
individual logical section into the staging area. Once a logical section is placed
into the staging area then you can officially commit that section into the
repository ensuring that each commit constitutes “one logical change”.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When introducing new experimental features that may cause a codebase to become
unstable or when refactoring code in order to make it more readable are two
specific circumstances where it  make sense to create branches. Branches in the two
examples above would allow a much more aggressive approach to modifying and
experimenting with existing code since the master branch provides reassurance that
a stable build is easily accessible.

How do the diagrams help you visualize the branch structure?

By associating Git branches with a visual representation of branches similar to
that of a tree I can easily conceptualize that the primary branch represents the
master from where other branches are initiated and that a “detached head state” is
the equivalent to a branch without a supporting trunk.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together is essentially a process where Git analyzes the last
commit in each individual branch and barring no conflicts combines them into one of
the two branches. This branch will now contain all the previous commits from both
branches organized by the timestamp on each commit. The way a merge is represented
in a diagram is logical because it depicts how two separate lines combine into one
and all the individual points (commits) that made up each line are now reachable by
this one line.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?